% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/func.R
\name{annotateProteins}
\alias{annotateProteins}
\title{Annotate proteins}
\usage{
annotateProteins(pdat, annotation)
}
\arguments{
\item{pdat}{A \code{proteusData} object containing protein data}

\item{annotation}{A data frame with a column \code{protein} containing
protein identifiers, as in \code{pdat$proteins}}
}
\value{
A \code{proteusData} with annotation field added.
}
\description{
\code{annotateProteins} adds protein annotations to a \code{proteusData}
object.
}
\details{
The only information about proteins proteus package extracts from the
evidence file are protein identifiers. These can be in various forms,
depending on how MaxQuant was ran. In order to annotate them, two steps are
required.

First, the user needs to create a data frame linking protein identifiers (as
in \code{pdat$proteins} vector) to some metadata. This data frame has to
contain a column called \code{protein} with the identifiers and any
additional columns with annotations, e.g., UniProt IDs, protein names, gene
names, domains, GO-terms and so on. These data can be obtained from UniProt.

Though only the \code{protein} column is required to merge data and all other
annotation columns are free, we strongly recommend, if possible, to include
two columns named \code{uniprot} and \code{name}, containing UniProt ID and
protein name/description. if present, these columns will be used by
interactive functions \code{plotFID_live} and \code{plotVolcano_live}.

Once the annotation table is created, it can be merged into the
\code{proteusData} object using \code{annotateProteins} function. The order
of identifiers in the annotation table is not important. Also, not all
proteins have to be present. The merge will add only the matching proteins.
As a result, this function returns a \code{proteusData} object with
\code{annotation} field added. It contains an annotation data frame with rows
corresponding to the internal list of proteins. This means the rows of this
data frame correspond one-to-one to the rows in \code{pdat$tab} and
\code{pdat$detect}, if pdat contains proteins (not peptides).
}
\examples{
# This example is specifically written for thest data with embedded UniProt IDs.
# For other data sets, in particular for organisms with their own protein data
# bases, different approaches might be appropriate.

library(proteusUnlabelled)
data(proteusUnlabelled)
library(UniProt.ws)

# Extract UniProt identifiers from protein IDs
unis <- sapply(as.character(prodat$proteins), function(prot) {
 s <- unlist(strsplit(prot, "|", fixed=TRUE))
 s[2]
})

up <- UniProt.ws(559292)

# Fetch data from UniProt
unitab <- UniProt.ws::select(up, unis, c("GENES", "PROTEIN-NAMES"), "UNIPROTKB")
unitab$protein <- names(unis)
unitab <- unitab[!is.na(unitab$`PROTEIN-NAMES`),]
# simplify protein names
unitab$name <- gsub("\\\\s\\\\(.*$", "", unitab$`PROTEIN-NAMES`, perl=TRUE)
# rename column to recommended "uniprot"
names(unitab)[1] <- "uniprot"

prodat <- annotateProteins(prodat, unitab)

}
